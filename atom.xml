<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Charley&#39;s Blog</title>
  
  <subtitle>一个人的命运啊，当然要靠自我奋斗。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.charleywang.xyz/"/>
  <updated>2019-05-03T00:29:28.247Z</updated>
  <id>http://www.charleywang.xyz/</id>
  
  <author>
    <name>Charley Wang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>scrapy分布式爬虫打造搜索引擎（三）—— scrapy爬虫实战</title>
    <link href="http://www.charleywang.xyz/2019/05/03/scrapy%E5%88%86%E5%B8%83%E5%BC%8F%E7%88%AC%E8%99%AB%E6%89%93%E9%80%A0%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%EF%BC%88%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94-scrapy%E7%88%AC%E8%99%AB%E5%AE%9E%E6%88%98/"/>
    <id>http://www.charleywang.xyz/2019/05/03/scrapy分布式爬虫打造搜索引擎（三）——-scrapy爬虫实战/</id>
    <published>2019-05-02T16:09:07.000Z</published>
    <updated>2019-05-03T00:29:28.247Z</updated>
    
    <content type="html"><![CDATA[<p></p><p align="center">爬虫首战之爬取<a href="blog.jobbole.com">文章-伯乐在线</a>上的文章及封面图</p><br><a id="more"></a><p></p><h3 id="制定爬取策略"><a href="#制定爬取策略" class="headerlink" title="制定爬取策略"></a>制定爬取策略</h3><ol><li>通过观察文章页面的网页结构，我们点开最新文章标签，发现它提供了所有文章的url，这样就不需要通过深度优先或广度优先的方法去爬取。</li><li>因为以后文章数会增加，因此页数也会相应地增加，为了我们地爬取代码能自适应增加内容，我们可以通过下一页来获取每页上的文章内容，而不是通过某个具体的页数来爬取。</li></ol><h3 id="爬取提示"><a href="#爬取提示" class="headerlink" title="爬取提示"></a>爬取提示</h3><ol><li>在pycharm中建立项目，我用的是anaconda的python解释器，通过anaconda prompt进入项目目录，<code>scrapy startproject [目录名]</code>即在项目目录下建立了scrapy框架。</li><li>在项目目录下建立main.py文件方便以后调试爬虫</li><li>修改settings.py下<code>ROBOTSTXT_OBEY = False</code>(否则scrapy会默认过滤掉不符合ROBOTS协议的url)</li><li>这里有个坑，<code>scrapy crawl [爬虫文件名]</code>必须cd到有scrapy.cfg那个目录下才能执行，否则会报错<code>Unknown command: crawl</code>   参见<a href="https://scrapy-chs.readthedocs.io/zh_CN/0.24/topics/commands.html" target="_blank" rel="noopener">官网:命令行工具(Command line tools)</a></li><li>pycharm下在根目录下还是会出现<code>Unknown command: crawl</code> ,解决办法参见<a href="https://blog.csdn.net/HuaCode/article/details/79429383" target="_blank" rel="noopener">该篇博客中的第二种方法</a>,即把scrapy.cfg移到项目根目录外</li><li>scrapy爬取的是未加载js之前的html</li><li>调试技巧，在命令行下运行<code>scrapy shell [url]</code></li><li>scrapy提供了xpath和css选择器两种方法提前html中的相应字段,也可以使用scrapy.loader中的itemloader</li><li>scrapy提供了exporter模块可以很方便地将item导出成各种格式的文件，如xml，json，csv等</li><li>使用 <code>from twisted.enterprise import adbapi</code>可以将mysql的插入操作变成异步操作，因为常规使用pymysql的cursor的话是跟不上爬虫的解析速度的</li></ol><h3 id="爬取过程"><a href="#爬取过程" class="headerlink" title="爬取过程"></a>爬取过程</h3><ol><li>在anaconda prompt中cd到保存爬虫项目的根目录，输入<code>scrapy startproject article_spider</code>，即在当前目录下生成了一个scrapy项目的框架。</li><li>根据提示，再cd到刚刚生成的项目目录下，输入<code>scrapy genspider jobbole http://blog.jobbole.com/all-posts/</code>后，scrapy即帮我们在article_spider\spiders\文件夹下生成了一个jobbole.py的文件，这个文件用于编写我们的后续爬虫逻辑。</li><li>为了便于调试，我们首先在项目目录下建立一个main.py文件，内容如下：<br><img src="https://i.loli.net/2019/05/03/5ccb19fb401d2.png" alt></li><li>修改settings.py中的ROBOTSTXT_OBEY为False，否则在后续爬取过程中它会自动过滤掉一些不符合这个规则的url</li><li><p>接着在jobbole.py下编写我们的爬虫逻辑，主要分为两大部分：</p><ul><li><p>获取文章列表页中每篇文章的url并交给scrapy进行下载后并进行解析<br><img src="https://i.loli.net/2019/05/03/5ccb19fb5e1c6.png" alt></p></li><li><p>获取下一页的url并交给scrapy进行下载，下载完成后交给parse<br><img src="https://i.loli.net/2019/05/03/5ccb8b058a275.png" alt></p></li></ul></li><li><p>接着继续在jobbole.py下编写具体解析一篇文章的函数parse_detail，大致工作分为如下几部分:</p><ul><li><p>通过css选择器提取字段，如：<br><img src="https://i.loli.net/2019/05/03/5ccb19fb418eb.png" alt></p></li><li><p>对于某些内容，我们只能提取到它的字符串，而实际上我们需要的只是其中的那个数字，这时我们就需要使用正则表达式去匹配我们需要提前的数字，如：<br><img src="https://i.loli.net/2019/05/03/5ccb19fb5abea.png" alt></p></li><li>对提取到的字段做一些规范性处理，如：<br><img src="https://i.loli.net/2019/05/03/5ccb19fbb62ef.png" alt></li></ul></li><li>在提取完所有的字段并都对它们进行了规范性处理后，我们在items.py中建立一个class来生成这些字段，如：<br><img src="https://i.loli.net/2019/05/03/5ccb19fbed320.png" alt><br>并在jobbole.py中实例化这个class，并对每个字段赋上面我们规范化处理后的值，如：<br><img src="https://i.loli.net/2019/05/03/5ccb19fbde931.png" alt></li><li>生成item之后，我们考虑将这些数据持久化，保存到关系型数据库mysql中，这可以通过scrapy提供的pipline轻松完成，如：<br><img src="https://i.loli.net/2019/05/03/5ccb19fc11106.png" alt></li></ol><h3 id="爬取结果"><a href="#爬取结果" class="headerlink" title="爬取结果"></a>爬取结果</h3><ol><li>将文章爬取的封面图保存到了article_spider\images\full下，如：<br><img src="https://i.loli.net/2019/05/03/5ccb19fc1918f.png" alt></li><li>将爬取到的文章内容保存到了mysql关系型数据库中，如：<br><img src="https://i.loli.net/2019/05/03/5ccb1a0b2da2e.png" alt></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;爬虫首战之爬取&lt;a href=&quot;blog.jobbole.com&quot;&gt;文章-伯乐在线&lt;/a&gt;上的文章及封面图&lt;/p&gt;&lt;br&gt;
    
    </summary>
    
      <category term="python" scheme="http://www.charleywang.xyz/categories/python/"/>
    
    
      <category term="spider" scheme="http://www.charleywang.xyz/tags/spider/"/>
    
      <category term="python" scheme="http://www.charleywang.xyz/tags/python/"/>
    
      <category term="scrapy" scheme="http://www.charleywang.xyz/tags/scrapy/"/>
    
  </entry>
  
  <entry>
    <title>scrapy分布式爬虫打造搜索引擎（二）——基础知识</title>
    <link href="http://www.charleywang.xyz/2019/05/02/scrapy%E5%88%86%E5%B8%83%E5%BC%8F%E7%88%AC%E8%99%AB%E6%89%93%E9%80%A0%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>http://www.charleywang.xyz/2019/05/02/scrapy分布式爬虫打造搜索引擎（二）——基础知识/</id>
    <published>2019-05-02T15:49:20.000Z</published>
    <updated>2019-05-02T16:03:36.263Z</updated>
    
    <content type="html"><![CDATA[<p align="center">有关爬虫的一些基本知识</p><a id="more"></a><h3 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h3><p><strong>scrapy vs requests+beautifulsoup</strong></p><ol><li>requests和beautifulsoup是库，scrapy是框架</li><li>scrapy框架中可以加入requests和beautifulsoup</li><li>scrapy基于twisted(一个异步I/O框架)，性能是最大的优势</li><li>scrapy方便扩展，提供了很多内置功能</li><li>scrapy内置的css和xpath selector非常方便，beautifulsoup最大的缺点就是慢（因为xpath selector基于C，而beautifulsoup基于python）</li></ol><h3 id="网页分类"><a href="#网页分类" class="headerlink" title="网页分类"></a>网页分类</h3><p><strong>常见类型的服务</strong></p><ol><li>静态网页</li><li>动态网页</li><li><p>webservice(restapi) //实际也是动态网页的一种，通过ajax方式与后台进行交互</p><p>静态网页与动态网页最大的区别在于它不需要与数据库进行交互</p><h3 id="爬虫能做什么"><a href="#爬虫能做什么" class="headerlink" title="爬虫能做什么"></a>爬虫能做什么</h3><p><strong>爬虫作用</strong></p><ol><li>搜索引擎 —— 百度、google、垂直领域搜索引擎</li><li>推荐引擎 —— 今日头条(根据用户浏览习惯爬取相关内容推送给用户)</li><li>机器学习的数据样本</li><li>数据分析，如金融数据分析，舆情分析等</li></ol><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><p>有关正则表达式的学习实际上是一个不小的工程，这里考虑后面新开一篇博客记录正则表达式的学习。这里仅作简单介绍。</p><h4 id="正则表达式介绍"><a href="#正则表达式介绍" class="headerlink" title="正则表达式介绍"></a>正则表达式介绍</h4><p><strong><em>有什么用？</em></strong><br> 用正则表达式过滤通过爬虫爬取的html，从而获取到我们想要的内容<br><strong>_目录_</strong></p></li><li>特殊字符<br>1）^表示以某个字符开头<br>&emsp; $ 表示以某个字符结尾<br>&emsp; . 表示一个任意字符<br>&emsp; <em> 表示前面一个字符出现任意多次(可为0次)<br>&emsp; ? 表示非贪婪匹配<br>&emsp;( ) 表示提取字串，通过group( )方法<br>&emsp;+ 表示前面一个字符至少出现一次(注意于</em> 号的区别)<br>&emsp;{ }表示前面一个字符出现的次数 &emsp;e.g. {2}出现2次&emsp; {2,}出现大于等于2次&emsp; {2，5}出现2~5次<br>&emsp;| 表示或关系<br>&emsp;[ ]表示满足中括号内的任意一个字符即可 &emsp;e.g. [0~9]{9}表示有9个字符，每个字符在0~9内 &emsp;&emsp;<br>&emsp; &emsp; [^1]{9}表示有9个字符且每个字符都不为1（这里^表示非关系）<br>&emsp;\s表示空格<br>&emsp;\S表示只要不为空格都能匹配<br>&emsp;\w表示用于匹配字母，数字或下划线字符 &emsp;相当于[a-zA-Z0-9_]<br>&emsp;\W表示用于匹配与\w不匹配的字符<br>&emsp;[\u4E00-\u9FA5]表示一个汉字<br>&emsp;\d表示一个数字</li></ol><h3 id="字符串编码"><a href="#字符串编码" class="headerlink" title="字符串编码"></a>字符串编码</h3><ol><li>计算机只能处理数字，文本转换为数字才能处理。计算机中8个bit作为一个字节，所以一个字节能表示的最大数字为255</li><li>计算机是美国人发明的，因此一个字节可以表示所有字符了，所以ASCII编码就成为美国人的标准编码</li><li>但是ASCII编码处理中文是明显不够的，中文不止255个汉字，所以中国制定了GB2312编码，用两个字节表示一个汉字。GB2312还把ASCII编码包含进去了，同理，日文、韩文等都发展了一套字节的编码，标准就越来越多，如果出现多种语言混合显示就一定会出现乱码</li><li>于是，unicode出现了，将所有语言统一到一套编码里</li><li>看一下ASCII和unicode编码：<br> 1） 字母A用ASCII编码十进制是65，二进制是0100 0001<br> 2） 汉字”中”已超出ASCII编码的范围，用unicode编码是20013，二进制是01001110 00101101<br> 3） A用unicode编码只需要补0 所以二进制编码是 00000000 0100 0001</li><li>乱码问题解决了，但是如果内容都是英文，unicode编码比ASCII编码需要多一倍的存储空间，同时传输也需要多一倍的传输</li><li>由此出现了可变长编码”utf-8”编码，把英文变成一个字节，汉字3个字节。特别生僻的4-6字节，如果传输大量英文，utf-8的作用就很明显。</li><li>计算机处理变长字符串不方便，因此在内存中将utf-8编码encode成unicode编码，当我们处理完文件再将它转换长utf-8编码存储起来</li><li>python2和python3一个最大的区别就是python3中都是用unicode统一编码，而python2中中文是用utf-8编码，python中encode方法的对象必须是unicode编码，如：在python2中，encode一个中文字符串需要先decode(“gb2312”)再encode(“utf8” ),而在python3中则可以直接encode(“utf8” )。这也是为什么python2在开头要声明编码为utf-8的原因，否则中文会出现乱码。</li></ol><h3 id="深度优先和广度优先"><a href="#深度优先和广度优先" class="headerlink" title="深度优先和广度优先"></a>深度优先和广度优先</h3><ol><li>网站的树结构<br><img src="https://i.loli.net/2019/05/02/5ccb13074b950.png" alt><br>如图，二级url中常常也包含一级url，为了避免陷入重复爬取同一url，我们可以将已爬取的url记录下     来，当要爬取一个url时先检查是否爬取过，这样就可避免陷入死循环。</li><li>深度优先算法</li><li>广度优先算法</li></ol><h3 id="爬虫去重策略"><a href="#爬虫去重策略" class="headerlink" title="爬虫去重策略"></a>爬虫去重策略</h3><ol><li>将访问过的url保存到数据库中(基本不用，效率太低)</li><li>将访问过的url保存到set中，只需要O(1)的代价就可查询url(url很多时，非常占存储空间)<br>e.g 1个亿的url(假设一个url占50Byte) 100000000<em> 2</em> 50Byte/1024/1024/1024 = 9GB</li><li>url经过md5等方法哈希后保存到set中(压缩url所占字符数，scrapy即采用这种方法)</li><li>用bitmap方法，将访问过的url通过hash函数映射到某一位(进一步降低了存储空间，但是冲突可能会非常高，所以也不太适用)</li><li>bloomfilter方法对bitmap进行改进，多重hash函数降低冲突<br>e.g 100000000/8/1024/1024 = 12MB</li></ol><h3 id="xpath"><a href="#xpath" class="headerlink" title="xpath"></a>xpath</h3><h4 id="xpath简介"><a href="#xpath简介" class="headerlink" title="xpath简介"></a>xpath简介</h4><ol><li>xpath使用路径表达式在xml和html中进行导航</li><li>xpath包含标准函数库</li><li>xpath是一个w3c标准<h4 id="xpath语法"><a href="#xpath语法" class="headerlink" title="xpath语法"></a>xpath语法</h4>参见<a href="http://www.w3school.com.cn/xpath/xpath_syntax.asp" target="_blank" rel="noopener">W3C:XPath 语法</a></li></ol><h3 id="session和cookie"><a href="#session和cookie" class="headerlink" title="session和cookie"></a>session和cookie</h3><ol><li>http协议是一种无状态的请求，服务器只响应用户请求并返回相应内容</li><li>为了产生有状态的请求(即让服务器识别出是哪个用户发起的请求)，就产生了cookie，当我们初次访问一个网站时，它的服务器会给我们返回一个id，这个id就会保存在我们本地的cookie中，当我们下次再访问它时就会带着这个id，服务器就会给我们返回与这个id有关的信息(注意:cookie与我们所访问的域名是绑定的，cookie是不能跨域访问的)</li><li>cookie中常常会包含我们的一些重要信息，如用户名和密码等，这就产生了安全性的问题，于是服务器就对这些信息进行加密，加密过后的信息就是session，就有相应的session_key、session_data等返回并存储到我们本地的cookie中，所以在本地cookie中我们常常会看到一些字符串，这就是加密过后的我们的一些信息，通常session都会有一个过期时间来增强安全性</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p align=&quot;center&quot;&gt;有关爬虫的一些基本知识&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="http://www.charleywang.xyz/categories/python/"/>
    
    
      <category term="spider" scheme="http://www.charleywang.xyz/tags/spider/"/>
    
      <category term="python" scheme="http://www.charleywang.xyz/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>scrapy分布式爬虫打造搜索引擎（一）——环境配置</title>
    <link href="http://www.charleywang.xyz/2019/04/26/scrapy%E5%88%86%E5%B8%83%E5%BC%8F%E7%88%AC%E8%99%AB%E6%89%93%E9%80%A0%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <id>http://www.charleywang.xyz/2019/04/26/scrapy分布式爬虫打造搜索引擎（一）——环境配置/</id>
    <published>2019-04-26T15:26:09.000Z</published>
    <updated>2019-04-26T15:30:53.722Z</updated>
    
    <content type="html"><![CDATA[<p></p><p align="center">开始打造我们的搜索引擎前，先来配置好我们的环境吧！</p><br><a id="more"></a><p></p><h3 id="开发环境搭建"><a href="#开发环境搭建" class="headerlink" title="开发环境搭建"></a>开发环境搭建</h3><ol><li>IDE — pycharm</li><li>数据库 — mysql、redis、elasticsearch</li><li>开发环境 — virtualenv</li></ol><h4 id="pycharm的安装和使用"><a href="#pycharm的安装和使用" class="headerlink" title="pycharm的安装和使用"></a>pycharm的安装和使用</h4><ol><li><a href="https://www.jetbrains.com/pycharm/download/#section=windows" target="_blank" rel="noopener">官网</a>安装pycharm(<strong>Professional</strong>)</li><li>使用license server激活pycharm(可参考<a href="https://zhile.io/2018/08/25/jetbrains-license-server-crack.html" target="_blank" rel="noopener">Jetbrains系列产品2019.1.1最新激活方法</a>)</li><li>打开pycharm，在File-Settings下设置熟悉的keymap和相应的interpreter</li></ol><h4 id="mysql和navicat的安装和使用"><a href="#mysql和navicat的安装和使用" class="headerlink" title="mysql和navicat的安装和使用"></a>mysql和navicat的安装和使用</h4><ol><li><a href="https://www.mysql.com/downloads/" target="_blank" rel="noopener">官网</a>安装对应系统的mysql (note:记住用户名和密码，后面连接数据库时要用到)</li><li>安装navicate，网上破解方法很多，这里不再赘述</li><li>命令行下启动mysql  <code>mysql -uroot -p</code></li><li>远程访问数据库：linux下修改mysql配置文件 <code>sudo vim /etc/mysql/mysql.conf.d/mysqld.cnf</code><br>（windows下的配置文件为my.ini）修改其中的bind-address为0.0.0.0(默认为127.0.0.1，即本地) </li><li>设置权限,使所有root用户都可以访问数据库,有两条命令<br> <code>GRANT ALL PRIVILEGES ON *.* TO &#39;root&#39;@&#39;%&#39; IDENTIFIED BY &#39;root&#39; WITH GRANT OPTION;</code>和<code>flush privileges;</code></li><li>打开navicat，连接mysql后，新建数据库时注意字符集选择<strong>utf8</strong>（否则会出现中文乱码），排序规则选择<strong>utf8_general_ci</strong></li></ol><h4 id="虚拟环境的安装和配置"><a href="#虚拟环境的安装和配置" class="headerlink" title="虚拟环境的安装和配置"></a>虚拟环境的安装和配置</h4><p>不同项目的环境配置不一样，使用虚拟环境可以很好地解决这个问题。<br><code>pip install virtualenv</code>  /<code>pip install virtualenvwrapper</code>用virualenv和virtualenvwrapper可以很好地进行虚拟环境地配置，具体使用可参考网上教程。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;开始打造我们的搜索引擎前，先来配置好我们的环境吧！&lt;/p&gt;&lt;br&gt;
    
    </summary>
    
      <category term="python" scheme="http://www.charleywang.xyz/categories/python/"/>
    
    
      <category term="spider" scheme="http://www.charleywang.xyz/tags/spider/"/>
    
      <category term="python" scheme="http://www.charleywang.xyz/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>二叉树的遍历(递归和迭代的C++实现)</title>
    <link href="http://www.charleywang.xyz/2019/04/18/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86-%E9%80%92%E5%BD%92%E5%92%8C%E8%BF%AD%E4%BB%A3%E7%9A%84C-%E5%AE%9E%E7%8E%B0/"/>
    <id>http://www.charleywang.xyz/2019/04/18/二叉树的遍历-递归和迭代的C-实现/</id>
    <published>2019-04-18T03:35:02.000Z</published>
    <updated>2019-04-27T05:53:56.752Z</updated>
    
    <content type="html"><![CDATA[<p></p><p align="center">基于leetcode上的几道题对二叉树的遍历进行复习。</p><br><a id="more"></a><p></p><h3 id="前序遍历-Leetcode-144"><a href="#前序遍历-Leetcode-144" class="headerlink" title="前序遍历(Leetcode 144)"></a>前序遍历(<a href="https://leetcode.com/problems/binary-tree-preorder-traversal/" target="_blank" rel="noopener">Leetcode 144</a>)</h3><p>先访问根节点，然后遍历左子树，最后遍历右子树。</p><h4 id="递归算法"><a href="#递归算法" class="headerlink" title="递归算法"></a>递归算法</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; preorderTraversal(TreeNode* root)&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">nullptr</span>) <span class="keyword">return</span> res;</span><br><span class="line">        preorderHelper(root,res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">preorderHelper</span><span class="params">(TreeNode* root,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;res)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">        res.push_back(root-&gt;val);</span><br><span class="line">        preorderHelper(root-&gt;left,res);</span><br><span class="line">        preorderHelper(root-&gt;right,res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="迭代算法"><a href="#迭代算法" class="headerlink" title="迭代算法"></a>迭代算法</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; preorderTraversal(TreeNode* root) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">nullptr</span>) <span class="keyword">return</span> res;</span><br><span class="line">        <span class="built_in">stack</span>&lt;TreeNode*&gt; tmp;   <span class="comment">//用栈来模拟递归调用的过程</span></span><br><span class="line">        TreeNode* curNode;</span><br><span class="line">        tmp.push(root);</span><br><span class="line">        <span class="keyword">while</span>(!tmp.empty())&#123;</span><br><span class="line">            curNode = tmp.top();</span><br><span class="line">            res.push_back(curNode-&gt;val);</span><br><span class="line">            tmp.pop();</span><br><span class="line">            <span class="comment">// 按右结点、左结点的顺序入栈，这样出栈时就会先访问左子树，再访问右子树</span></span><br><span class="line">            <span class="keyword">if</span>(curNode-&gt;right != <span class="literal">nullptr</span>) tmp.push(curNode-&gt;right);</span><br><span class="line">            <span class="keyword">if</span>(curNode-&gt;left != <span class="literal">nullptr</span>) tmp.push(curNode-&gt;left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="中序遍历-Leetcode-94"><a href="#中序遍历-Leetcode-94" class="headerlink" title="中序遍历(Leetcode 94)"></a>中序遍历(<a href="https://leetcode.com/problems/binary-tree-inorder-traversal/" target="_blank" rel="noopener">Leetcode 94</a>)</h3><p>先遍历左子树，然后访问根节点，最后遍历右子树。</p><h4 id="递归算法-1"><a href="#递归算法-1" class="headerlink" title="递归算法"></a>递归算法</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; inorderTraversal(TreeNode* root)&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">nullptr</span>) <span class="keyword">return</span> res;</span><br><span class="line">        inorderHelper(root,res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inorderHelper</span><span class="params">(TreeNode* root,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;res)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">        inorderHelper(root-&gt;left,res);</span><br><span class="line">        res.push_back(root-&gt;val);</span><br><span class="line">        inorderHelper(root-&gt;right,res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="迭代算法-1"><a href="#迭代算法-1" class="headerlink" title="迭代算法"></a>迭代算法</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; inorderTraversal(TreeNode* root) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">        <span class="built_in">stack</span>&lt;TreeNode*&gt; tmp;</span><br><span class="line">        <span class="keyword">while</span> (!tmp.empty() || root != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (root != <span class="literal">NULL</span>) &#123;</span><br><span class="line">                tmp.push(root);</span><br><span class="line">                root = root-&gt;left;      <span class="comment">//访问最左节点</span></span><br><span class="line">            &#125;       </span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                root = tmp.top();</span><br><span class="line">                res.push_back((tmp.top())-&gt;val);</span><br><span class="line">                tmp.pop();</span><br><span class="line">                root = root-&gt;right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="后序遍历-Leetcode-145"><a href="#后序遍历-Leetcode-145" class="headerlink" title="后序遍历(Leetcode 145)"></a>后序遍历(<a href="https://leetcode.com/problems/binary-tree-postorder-traversal/" target="_blank" rel="noopener">Leetcode 145</a>)</h3><p>先遍历左子树，然后遍历右子树，最后访问根结点</p><h4 id="递归算法-2"><a href="#递归算法-2" class="headerlink" title="递归算法"></a>递归算法</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; postorderTraversal(TreeNode* root)&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">nullptr</span>) <span class="keyword">return</span> res;</span><br><span class="line">        postorderHelper(root,res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">postorderHelper</span><span class="params">(TreeNode* root,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;res)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">        postorderHelper(root-&gt;left,res);</span><br><span class="line">        postorderHelper(root-&gt;right,res);</span><br><span class="line">        res.push_back(root-&gt;val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="迭代算法-2"><a href="#迭代算法-2" class="headerlink" title="迭代算法"></a>迭代算法</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; postorderTraversal(TreeNode* root) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">        <span class="built_in">stack</span>&lt;TreeNode*&gt; tmp;</span><br><span class="line">        TreeNode* curNode = root;</span><br><span class="line">        <span class="keyword">if</span>(curNode) tmp.push(root);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> res;</span><br><span class="line">        <span class="keyword">while</span>(!tmp.empty())&#123;</span><br><span class="line">            curNode = tmp.top();</span><br><span class="line">            <span class="keyword">if</span>(curNode-&gt;left) &#123;</span><br><span class="line">                tmp.push(curNode-&gt;left);</span><br><span class="line">                curNode-&gt;left = <span class="literal">NULL</span>;       <span class="comment">//将访问过节点的左子树设为空，否则会进入死循环</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(curNode-&gt;right)&#123; </span><br><span class="line">                    tmp.push(curNode-&gt;right);</span><br><span class="line">                    curNode-&gt;right = <span class="literal">NULL</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    res.push_back(curNode-&gt;val);</span><br><span class="line">                    tmp.pop();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="层序遍历-Leetcode-102"><a href="#层序遍历-Leetcode-102" class="headerlink" title="层序遍历(Leetcode 102)"></a>层序遍历(<a href="https://leetcode.com/problems/binary-tree-level-order-traversal/" target="_blank" rel="noopener">Leetcode 102</a>)</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; levelOrder(TreeNode* root) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; res;</span><br><span class="line">        <span class="built_in">queue</span>&lt;TreeNode*&gt; que;</span><br><span class="line">        TreeNode* curNode = root;</span><br><span class="line">        <span class="keyword">if</span>(curNode) que.push(curNode);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> res;</span><br><span class="line">        <span class="keyword">while</span>(!que.empty())&#123;</span><br><span class="line">            <span class="keyword">int</span> size = que.size();          <span class="comment">//获取该层节点个数</span></span><br><span class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tmp; </span><br><span class="line">            <span class="keyword">while</span>(size--)&#123;</span><br><span class="line">                curNode = que.front();</span><br><span class="line">                que.pop();</span><br><span class="line">                tmp.push_back(curNode-&gt;val);</span><br><span class="line">                <span class="keyword">if</span>(curNode-&gt;left) que.push(curNode-&gt;left);</span><br><span class="line">                <span class="keyword">if</span>(curNode-&gt;right) que.push(curNode-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">            res.push_back(tmp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;基于leetcode上的几道题对二叉树的遍历进行复习。&lt;/p&gt;&lt;br&gt;
    
    </summary>
    
      <category term="algorithm and data structure" scheme="http://www.charleywang.xyz/categories/algorithm-and-data-structure/"/>
    
    
      <category term="binary tree" scheme="http://www.charleywang.xyz/tags/binary-tree/"/>
    
  </entry>
  
  <entry>
    <title>Exercise On Leetcode</title>
    <link href="http://www.charleywang.xyz/2019/04/11/Exercise-On-Leetcode/"/>
    <id>http://www.charleywang.xyz/2019/04/11/Exercise-On-Leetcode/</id>
    <published>2019-04-11T06:02:05.000Z</published>
    <updated>2019-04-27T07:50:54.859Z</updated>
    
    <content type="html"><![CDATA[<p></p><p align="center">Record my thoughts and solutions to the problems on leetcode.</p><br><a id="more"></a><p></p><h2 id="Depth-first-Search"><a href="#Depth-first-Search" class="headerlink" title="Depth-first Search"></a>Depth-first Search</h2><h3 id="Easy"><a href="#Easy" class="headerlink" title="Easy"></a>Easy</h3><h4 id="leetcode-100"><a href="#leetcode-100" class="headerlink" title="leetcode-100"></a><a href="https://leetcode.com/problems/same-tree/" target="_blank" rel="noopener">leetcode-100</a></h4><h5 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h5><p>判断两颗树相同需两个条件：</p><ol><li>当前节点值相同  </li><li>左子树相同<strong>且</strong>右子树相同        </li></ol><p>基于此和树的递归数据结构容易写出递归程序解决该问题。<br>时间复杂度:<br>&emsp;&emsp;O(N)    &emsp;//每个节点访问一次<br>空间复杂度:<br>&emsp;&emsp;最好: O(log(N)) (完全平衡二叉树)<br>&emsp;&emsp;最坏: O(N)      (退化为链表)         &emsp;//N为维护递归栈的深度                 </p><h5 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h5><p><strong><em>c++:</em></strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isSameTree</span><span class="params">(TreeNode* p, TreeNode* q)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(p==<span class="literal">NULL</span> &amp;&amp; q==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(p==<span class="literal">NULL</span> || q==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;val == q-&gt;val)&#123;</span><br><span class="line">            <span class="keyword">return</span> isSameTree(p-&gt;left,q-&gt;left) &amp;&amp; isSameTree(p-&gt;right,q-&gt;right);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p><strong><em>python:</em></strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.left = None</span></span><br><span class="line"><span class="comment">#         self.right = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isSameTree</span><span class="params">(self, p: TreeNode, q: TreeNode)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">if</span> p==<span class="literal">None</span> <span class="keyword">and</span> q==<span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">if</span> p==<span class="literal">None</span> <span class="keyword">or</span> q==<span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> p.val == q.val:</span><br><span class="line">            <span class="keyword">return</span> self.isSameTree(p.right,q.right) <span class="keyword">and</span> self.isSameTree(p.left,q.left)</span><br><span class="line">        <span class="keyword">else</span>: <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure></p><h4 id="leetcode-897"><a href="#leetcode-897" class="headerlink" title="leetcode-897"></a><a href="https://leetcode.com/problems/increasing-order-search-tree/" target="_blank" rel="noopener">leetcode-897</a></h4><h5 id="思路：-1"><a href="#思路：-1" class="headerlink" title="思路："></a>思路：</h5><p>考虑到这是一棵二叉搜索树，使用中序遍历的同时将访问的结点连接到结果结点的右子树并将左子树设为空，即可将原二叉树的结点升序输出了。</p><p>时间复杂度:  O(N)    &emsp;//每个节点访问一次<br>空间复杂度:  O(H)     &emsp;//H为树的高度     </p><h5 id="代码：-1"><a href="#代码：-1" class="headerlink" title="代码："></a>代码：</h5><p><strong><em>c++:</em></strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">increasingBST</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        <span class="function">TreeNode <span class="title">dummy</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">        p = &amp;dummy;</span><br><span class="line">        InOrderTravel(root);</span><br><span class="line">        <span class="keyword">return</span> dummy.right;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">InOrderTravel</span><span class="params">(TreeNode* root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span>;</span><br><span class="line">        InOrderTravel(root-&gt;left);</span><br><span class="line">        p-&gt;right = root;</span><br><span class="line">        p = root;</span><br><span class="line">        p-&gt;left = <span class="literal">NULL</span>;</span><br><span class="line">        InOrderTravel(root-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    TreeNode* p;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p><strong><em>python:</em></strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.left = None</span></span><br><span class="line"><span class="comment">#         self.right = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">increasingBST</span><span class="params">(self, root: TreeNode)</span> -&gt; TreeNode:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">inorder</span><span class="params">(node)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> node:</span><br><span class="line">                inorder(node.left)</span><br><span class="line">                self.cur.right = node</span><br><span class="line">                self.cur = node</span><br><span class="line">                self.cur.left = <span class="literal">None</span></span><br><span class="line">                inorder(node.right)</span><br><span class="line">        </span><br><span class="line">        ans = self.cur = TreeNode(<span class="literal">None</span>)</span><br><span class="line">        inorder(root)</span><br><span class="line">        <span class="keyword">return</span> ans.right</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;Record my thoughts and solutions to the problems on leetcode.&lt;/p&gt;&lt;br&gt;
    
    </summary>
    
      <category term="algorithm and data structure" scheme="http://www.charleywang.xyz/categories/algorithm-and-data-structure/"/>
    
    
      <category term="algorithm" scheme="http://www.charleywang.xyz/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://www.charleywang.xyz/2019/04/07/hello-world/"/>
    <id>http://www.charleywang.xyz/2019/04/07/hello-world/</id>
    <published>2019-04-07T09:29:31.982Z</published>
    <updated>2019-04-08T10:32:39.136Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.<br><a id="more"></a></p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;br&gt;
    
    </summary>
    
      <category term="Blog" scheme="http://www.charleywang.xyz/categories/Blog/"/>
    
      <category term="Hexo" scheme="http://www.charleywang.xyz/categories/Blog/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://www.charleywang.xyz/tags/Hexo/"/>
    
  </entry>
  
</feed>
